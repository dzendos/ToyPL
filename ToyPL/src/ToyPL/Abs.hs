-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language ToyPL.

module ToyPL.Abs where

import qualified Data.String

data ProgramState = ProgramState {  finishLabel   :: Integer -- ^ Represents a label that means that program is terminated.
                                 ,  execPosition  :: Integer -- ^ Position of the program execution (position of command that should be executed next).
                                 ,  execCode      :: Integer -- ^ Code-state of the program -1, 0, 1 for running, exited successfully, unsuccessfully programs respectively.
                                 ,  exitMessage   :: String  -- ^ Message after program has finished its execution.
                                 ,  variables     :: [(Variable, Integer)] -- ^ Map of variables and their values.
                                 }

instance Show ProgramState where
  show state = "\nvariables: \n" ++ vars
    where 
      vars = unlines $ map (\(v, i) -> "    " ++ (show v) ++ " = " ++ (show i)) (variables state)

data Program
    = PSeq Program Program
    | PIf Condition Program Program
    | PAssign Variable Exp
    | PWhile Condition Program
  deriving (Eq, Ord, Show, Read)

data Condition
    = COr Condition Condition
    | CAnd Condition Condition
    | CNot Condition
    | CEquals Exp Exp
    | CLessThan Exp Exp
    | CBiggerThan Exp Exp
    | CLessOrEqual Exp Exp
    | CBiggerOrEqual Exp Exp
  deriving (Eq, Ord, Read)

instance Show Condition where
  show (COr  cond1 cond2)         = "(" ++ (show cond1) ++ " or "  ++ (show cond2) ++ ")"
  show (CAnd cond1 cond2)         = "(" ++ (show cond1) ++ " and " ++ (show cond2) ++ ")"

  show (CNot cond)                = "not " ++ "(" ++ (show cond) ++ ")"

  show (CEquals exp1 exp2)        = "(" ++ (show exp1) ++ " = "  ++ (show exp2) ++ ")"
  show (CLessThan exp1 exp2)      = "(" ++ (show exp1) ++ " < "  ++ (show exp2) ++ ")"
  show (CBiggerThan exp1 exp2)    = "(" ++ (show exp1) ++ " > "  ++ (show exp2) ++ ")"
  show (CLessOrEqual exp1 exp2)   = "(" ++ (show exp1) ++ " <= " ++ (show exp2) ++ ")"
  show (CBiggerOrEqual exp1 exp2) = "(" ++ (show exp1) ++ " >= " ++ (show exp2) ++ ")"
  

data Exp
    = EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EFact Exp
    | EInt Integer
    | EVar Variable
  deriving (Eq, Ord, Read)

instance Show Exp where
  show (EAdd exp1 exp2) = "(" ++ (show exp1) ++ " + " ++ (show exp2) ++ ")"
  show (ESub exp1 exp2) = "(" ++ (show exp1) ++ " - " ++ (show exp2) ++ ")"
  show (EMul exp1 exp2) = "(" ++ (show exp1) ++ " * " ++ (show exp2) ++ ")"
  show (EDiv exp1 exp2) = "(" ++ (show exp1) ++ " / " ++ (show exp2) ++ ")"
  show (EFact exp)      = "(" ++ (show exp) ++ ")"  ++ "!"
  show (EInt integer)   = show integer
  show (EVar variable)  = show variable

data Variable = Variable Ident
  deriving (Eq, Ord, Read)

instance Show Variable where
  show (Variable ident) = show ident

data Command
    = VMProg Command Command
    | VMAssignment Label Variable Exp Label
    | VMBranching Label Condition Label Label
  deriving (Eq, Ord, Read)

instance Show Command where
  show (VMAssignment label1 variable exp label2)    = (show label1) ++ ": " ++ (show variable) 
                                                    ++ " := " ++ (show exp) ++ " goto " ++ (show label2)
  show (VMBranching label1 condition label2 label3) = (show label1) ++ ": if " ++ (show condition) ++ " then " 
                                                    ++ (show label2) ++ " else " ++ (show label3)
data Label = VMLabel Integer
  deriving (Eq, Ord, Read)

instance Show Label where
  show (VMLabel integer) = show integer

newtype Ident = Ident String
  deriving (Eq, Ord, Read, Data.String.IsString)

instance Show Ident where
  show (Ident name) = name